@using FilmProject.Models.GeneralMovieApi
@model Rootobject

@{
    ViewData["Title"] = $"Kết quả tìm kiếm cho: {ViewBag.CurrentKeyword}";
}
@section Styles {
    <link rel="stylesheet" href="~/css/Search.css" asp-append-version="true" />
}

<div class="container-fluid mt-4">
    <div class="row mb-4">
        <div class="col-12">
            @await Html.PartialAsync("_SearchFilterPartial")
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">Kết quả tìm kiếm cho: "@ViewBag.CurrentKeyword"</h1>

            <div id="movie-list-container" class="row">
                @if (ViewBag.SearchData != null)
                {
                    @await Html.PartialAsync("_MovieListPartial", (ViewBag.SearchData as Data)?.items?.ToList())
                }
            </div>

            <div id="loader" class="text-center mt-4" style="display: none;">
                <p>Đang tải...</p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const movieListContainer = document.getElementById('movie-list-container');
        const loader = document.getElementById('loader');

        // Lấy thông tin phân trang từ ViewBag
        let currentPage = @(ViewBag.CurrentPage ?? 1);
         const totalPages = @(ViewBag.TotalPages ?? 1);
        let isLoading = false; // Biến cờ để ngăn các yêu cầu trùng lặp

        window.addEventListener('scroll', async () => {
                // Kiểm tra nếu đã cuộn gần đến cuối trang, có trang mới, và không có yêu cầu đang được xử lý console.log("-------------------");
        // console.log("innerHeight:", window.innerHeight);
        // console.log("scrollY:", window.scrollY);
        // console.log("offsetHeight:", document.body.offsetHeight);
        // console.log("currentPage:", currentPage);
        // console.log("totalPages:", totalPages);
        // console.log("isLoading:", isLoading);
        // console.log("-------------------");
            if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 500 && currentPage < totalPages && !isLoading) {
                isLoading = true;
                loader.style.display = 'block';

                currentPage++;
                // Xây dựng URL cho trang tiếp theo, giữ lại các tham số bộ lọc hiện có
                const currentUrl = new URL(window.location.href);
                currentUrl.searchParams.set('page', currentPage);

                try {
                    // Gửi yêu cầu AJAX đến controller
                    const response = await fetch(currentUrl.toString(), {
                        headers: { 'X-Requested-With': 'XMLHttpRequest' }
                    });

                    if (response.ok) {
                        const newMoviesHtml = await response.text();
                        movieListContainer.insertAdjacentHTML('beforeend', newMoviesHtml);
                    } else {
                        console.error('Failed to load more movies. Status:', response.status);
                    }
                } catch (error) {
                    console.error('Error loading more movies:', error);
                } finally {
                    isLoading = false;
                    loader.style.display = 'none';
                }
            }
        });
    </script>
}



